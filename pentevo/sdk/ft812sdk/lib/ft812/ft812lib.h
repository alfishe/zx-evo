#pragma once// ft812cp.cvoid ft_Append(u32 ptr, u32 num);void ft_BgColor(u32 c);void ft_BitmapTransform(s32 x0, s32 y0, s32 x1, s32 y1, s32 x2, s32 y2, s32 tx0, s32 ty0, s32 tx1, s32 ty1, s32 tx2, s32 ty2, u16 result);void ft_Button(s16 x, s16 y, s16 w, s16 h, s16 font, u16 options, const char *s);void ft_Calibrate(u32 result);void ft_Clock(s16 x, s16 y, s16 r, u16 options, u16 h, u16 m, u16 s, u16 ms);void ft_ColdStart();void ft_Dial(s16 x, s16 y, s16 r, u16 options, u16 val);void ft_Dlstart();void ft_FgColor(u32 c);void ft_Gauge(s16 x, s16 y, s16 r, u16 options, u16 major, u16 minor, u16 val, u16 range);void ft_GetMatrix(s32 a, s32 b, s32 c, s32 d, s32 e, s32 f);void ft_GetProps(u32 ptr, u32 w, u32 h);void ft_GetPtr(u32 result);void ft_GradColor(u32 c);void ft_Gradient(s16 x0, s16 y0, u32 rgb0, s16 x1, s16 y1, u32 rgb1);void ft_Inflate(u32 ptr);void ft_Int_RAMShared(u32 ptr);void ft_Int_SWLoadImage(u32 ptr, u32 options);void ft_Interrupt(u32 ms);void ft_Keys(s16 x, s16 y, s16 w, s16 h, s16 font, u16 options, const char *s);void ft_LoadIdentity();void ft_LoadImage(u32 ptr, u32 options);void ft_Logo();void ft_MediaFifo(u32 ptr, u32 size);void ft_MemCrc(u32 ptr, u32 num, u32 result);void ft_MemSet(u32 ptr, u32 value, u32 num);void ft_MemWrite(u32 ptr, u32 num);void ft_MemZero(u32 ptr, u32 num);void ft_Memcpy(u32 dest, u32 src, u32 num);void ft_Number(s16 x, s16 y, s16 font, u16 options, s32 n);void ft_PlayVideo(u32 options);void ft_Progress(s16 x, s16 y, s16 w, s16 h, u16 options, u16 val, u16 range);void ft_RegRead(u32 ptr, u32 result);void ft_RomFont(u32 font, u32 romslot);void ft_Rotate(s32 a);void ft_Scale(s32 sx, s32 sy);void ft_ScreenSaver();void ft_Scrollbar(s16 x, s16 y, s16 w, s16 h, u16 options, u16 val, u16 size, u16 range);void ft_SetBase(u32 base);void ft_SetBitmap(u32 source, u16 fmt, u16 w, u16 h);void ft_SetFont(u32 font, u32 ptr);void ft_SetFont2(u32 font, u32 ptr, u32 firstchar);void ft_SetMatrix();void ft_SetRotate(u32 r);void ft_SetScratch(u32 handle);void ft_Sketch(s16 x, s16 y, u16 w, u16 h, u32 ptr, u16 format);void ft_Slider(s16 x, s16 y, s16 w, s16 h, u16 options, u16 val, u16 range);void ft_Snapshot(u32 ptr);void ft_Snapshot2(u32 fmt, u32 ptr, s16 x, s16 y, s16 w, s16 h);void ft_Spinner(s16 x, s16 y, u16 style, u16 scale);void ft_Stop();void ft_Swap();void ft_Sync();void ft_Text(s16 x, s16 y, s16 font, u16 options, const char *s);void ft_Toggle(s16 x, s16 y, s16 w, s16 font, u16 options, u16 state, const char *s);void ft_TouchTransform(s32 x0, s32 y0, s32 x1, s32 y1, s32 x2, s32 y2, s32 tx0, s32 ty0, s32 tx1, s32 ty1, s32 tx2, s32 ty2, u16 result);void ft_Track(s16 x, s16 y, s16 w, s16 h, s16 tag);void ft_Translate(s32 tx, s32 ty);void ft_VideoFrame(u32 dst, u32 ptr);void ft_VideoStart();// ft812dl.cvoid ft_AlphaFunc(u8 func, u8 ref);void ft_Begin(u8 prim);void ft_BitmapHandle(u8 handle);void ft_BitmapLayout(u8 format, u16 linestride, u16 height);void ft_BitmapSize(u8 filter, u8 wrapx, u8 wrapy, u16 width, u16 height);void ft_BitmapSource(u32 addr);void ft_BitmapTransformA(s32 a);void ft_BitmapTransformB(s32 b);void ft_BitmapTransformC(s32 c);void ft_BitmapTransformD(s32 d);void ft_BitmapTransformE(s32 e);void ft_BitmapTransformF(s32 f);void ft_BlendFunc(u8 src, u8 dst);void ft_Call(u16 dest);void ft_Cell(u8 cell);void ft_Clear(u8 c, u8 s, u8 t);void ft_ClearAll();void ft_ClearColorA(u8 alpha);void ft_ClearColorRGB(u8 red, u8 green, u8 blue);void ft_ClearColorRGB32(u32 rgb);void ft_ClearStencil(u8 s);void ft_ClearTag(u8 s);void ft_ColorA(u8 alpha);void ft_ColorMask(u8 r, u8 g, u8 b, u8 a);void ft_ColorRGB(u8 red, u8 green, u8 blue);void ft_ColorRGB32(u32 rgb);void ft_Display();void ft_End();void ft_Jump(u16 dest);void ft_LineWidth(u16 width);void ft_Macro(u8 m);void ft_PaletteSource(u32 addr);void ft_PointSize(u16 size);void ft_RestoreContext();void ft_Return();void ft_SaveContext();void ft_ScissorSize(u16 width, u16 height);void ft_ScissorXY(u16 x, u16 y);void ft_StencilFunc(u8 func, u8 ref, u8 mask);void ft_StencilMask(u8 mask);void ft_StencilOp(u8 sfail, u8 spass);void ft_Tag(u8 s);void ft_TagMask(u8 mask);void ft_Vertex2f(s16 x, s16 y);void ft_Vertex2ii(u16 x, u16 y, u8 handle, u8 cell);void ft_VertexFormat(u8 f);void ft_VertexTranslateX(s32 v);void ft_VertexTranslateY(s32 v);// ft812func.cvoid ft_ccmd_start(void*);void ft_ccmd(u32);void ft_cstr(const char*);void ft_ccmd_write();void ft_load_ram_p(void*, u8, u32, u32);void ft_load_ram_dma(void*, u8, u32, u32);void ft_cp_wait();void ft_cp_reset();bool ft_load_cfifo(void*, u16);bool ft_load_cfifo_p(void*, u8, u32);bool ft_load_cfifo_dma(void*, u8, u32);void ft_spi_sel();void ft_spi_unsel();u8 ft_rreg8(u16);u16 ft_rreg16(u16);u32 ft_rreg32(u16);void ft_wreg8(u16, u8);void ft_wreg16(u16, u16);void ft_wreg32(u16, u32);void ft_read(void*, u32, u16);void ft_start_read(u32);void ft_finish_read(void*, u16);void ft_write(void*, u32, u16);void ft_start_write(u32);void ft_finish_write(void*, u16);void ft_write_dl(void*, u16);void ft_cmd(u8);void ft_cmdp(u8, u8);void ft_init(u8);void ft_swap();void ft_wait_swap();extern const FT_MODE ft_modes[];// ft812math.cs16 rcos(s16 r, u16 th);s16 rsin(s16 r, u16 th);extern const u16 sintab[];extern u32 *ft_ccmdb;extern u16 ft_ccmdp;